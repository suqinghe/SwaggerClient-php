<?php
/**
 * ServiceInfoResponses
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eBay国际物流平台商户接口
 *
 * eBay国际物流平台商户接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceInfoResponses Class Doc Comment
 *
 * @category Class
 * @description 物流服务
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceInfoResponses implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceInfoResponses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description_en' => 'string',
        'description_zh' => 'string',
        'directions' => '\Swagger\Client\Model\DirectionsResponses[]',
        'fee_description' => 'string',
        'incoterms' => 'int',
        'is_support_elec' => 'bool',
        'max_length' => 'float',
        'max_total_length' => 'float',
        'max_weight' => 'float',
        'name_en' => 'string',
        'name_zh' => 'string',
        'picture' => 'string',
        'prescription' => 'string',
        'service_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description_en' => null,
        'description_zh' => null,
        'directions' => null,
        'fee_description' => null,
        'incoterms' => 'int32',
        'is_support_elec' => null,
        'max_length' => null,
        'max_total_length' => null,
        'max_weight' => null,
        'name_en' => null,
        'name_zh' => null,
        'picture' => null,
        'prescription' => null,
        'service_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description_en' => 'descriptionEn',
        'description_zh' => 'descriptionZh',
        'directions' => 'directions',
        'fee_description' => 'feeDescription',
        'incoterms' => 'incoterms',
        'is_support_elec' => 'isSupportElec',
        'max_length' => 'maxLength',
        'max_total_length' => 'maxTotalLength',
        'max_weight' => 'maxWeight',
        'name_en' => 'nameEn',
        'name_zh' => 'nameZh',
        'picture' => 'picture',
        'prescription' => 'prescription',
        'service_id' => 'serviceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description_en' => 'setDescriptionEn',
        'description_zh' => 'setDescriptionZh',
        'directions' => 'setDirections',
        'fee_description' => 'setFeeDescription',
        'incoterms' => 'setIncoterms',
        'is_support_elec' => 'setIsSupportElec',
        'max_length' => 'setMaxLength',
        'max_total_length' => 'setMaxTotalLength',
        'max_weight' => 'setMaxWeight',
        'name_en' => 'setNameEn',
        'name_zh' => 'setNameZh',
        'picture' => 'setPicture',
        'prescription' => 'setPrescription',
        'service_id' => 'setServiceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description_en' => 'getDescriptionEn',
        'description_zh' => 'getDescriptionZh',
        'directions' => 'getDirections',
        'fee_description' => 'getFeeDescription',
        'incoterms' => 'getIncoterms',
        'is_support_elec' => 'getIsSupportElec',
        'max_length' => 'getMaxLength',
        'max_total_length' => 'getMaxTotalLength',
        'max_weight' => 'getMaxWeight',
        'name_en' => 'getNameEn',
        'name_zh' => 'getNameZh',
        'picture' => 'getPicture',
        'prescription' => 'getPrescription',
        'service_id' => 'getServiceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description_en'] = isset($data['description_en']) ? $data['description_en'] : null;
        $this->container['description_zh'] = isset($data['description_zh']) ? $data['description_zh'] : null;
        $this->container['directions'] = isset($data['directions']) ? $data['directions'] : null;
        $this->container['fee_description'] = isset($data['fee_description']) ? $data['fee_description'] : null;
        $this->container['incoterms'] = isset($data['incoterms']) ? $data['incoterms'] : null;
        $this->container['is_support_elec'] = isset($data['is_support_elec']) ? $data['is_support_elec'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['max_total_length'] = isset($data['max_total_length']) ? $data['max_total_length'] : null;
        $this->container['max_weight'] = isset($data['max_weight']) ? $data['max_weight'] : null;
        $this->container['name_en'] = isset($data['name_en']) ? $data['name_en'] : null;
        $this->container['name_zh'] = isset($data['name_zh']) ? $data['name_zh'] : null;
        $this->container['picture'] = isset($data['picture']) ? $data['picture'] : null;
        $this->container['prescription'] = isset($data['prescription']) ? $data['prescription'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description_en'] === null) {
            $invalidProperties[] = "'description_en' can't be null";
        }
        if ($this->container['description_zh'] === null) {
            $invalidProperties[] = "'description_zh' can't be null";
        }
        if ($this->container['directions'] === null) {
            $invalidProperties[] = "'directions' can't be null";
        }
        if ($this->container['fee_description'] === null) {
            $invalidProperties[] = "'fee_description' can't be null";
        }
        if ($this->container['is_support_elec'] === null) {
            $invalidProperties[] = "'is_support_elec' can't be null";
        }
        if ($this->container['max_length'] === null) {
            $invalidProperties[] = "'max_length' can't be null";
        }
        if ($this->container['max_total_length'] === null) {
            $invalidProperties[] = "'max_total_length' can't be null";
        }
        if ($this->container['max_weight'] === null) {
            $invalidProperties[] = "'max_weight' can't be null";
        }
        if ($this->container['name_en'] === null) {
            $invalidProperties[] = "'name_en' can't be null";
        }
        if ($this->container['name_zh'] === null) {
            $invalidProperties[] = "'name_zh' can't be null";
        }
        if ($this->container['picture'] === null) {
            $invalidProperties[] = "'picture' can't be null";
        }
        if ($this->container['prescription'] === null) {
            $invalidProperties[] = "'prescription' can't be null";
        }
        if ($this->container['service_id'] === null) {
            $invalidProperties[] = "'service_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['description_en'] === null) {
            return false;
        }
        if ($this->container['description_zh'] === null) {
            return false;
        }
        if ($this->container['directions'] === null) {
            return false;
        }
        if ($this->container['fee_description'] === null) {
            return false;
        }
        if ($this->container['is_support_elec'] === null) {
            return false;
        }
        if ($this->container['max_length'] === null) {
            return false;
        }
        if ($this->container['max_total_length'] === null) {
            return false;
        }
        if ($this->container['max_weight'] === null) {
            return false;
        }
        if ($this->container['name_en'] === null) {
            return false;
        }
        if ($this->container['name_zh'] === null) {
            return false;
        }
        if ($this->container['picture'] === null) {
            return false;
        }
        if ($this->container['prescription'] === null) {
            return false;
        }
        if ($this->container['service_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets description_en
     *
     * @return string
     */
    public function getDescriptionEn()
    {
        return $this->container['description_en'];
    }

    /**
     * Sets description_en
     *
     * @param string $description_en 物流服务描述（英文）
     *
     * @return $this
     */
    public function setDescriptionEn($description_en)
    {
        $this->container['description_en'] = $description_en;

        return $this;
    }

    /**
     * Gets description_zh
     *
     * @return string
     */
    public function getDescriptionZh()
    {
        return $this->container['description_zh'];
    }

    /**
     * Sets description_zh
     *
     * @param string $description_zh 物流服务描述（中文）
     *
     * @return $this
     */
    public function setDescriptionZh($description_zh)
    {
        $this->container['description_zh'] = $description_zh;

        return $this;
    }

    /**
     * Gets directions
     *
     * @return \Swagger\Client\Model\DirectionsResponses[]
     */
    public function getDirections()
    {
        return $this->container['directions'];
    }

    /**
     * Sets directions
     *
     * @param \Swagger\Client\Model\DirectionsResponses[] $directions directions
     *
     * @return $this
     */
    public function setDirections($directions)
    {
        $this->container['directions'] = $directions;

        return $this;
    }

    /**
     * Gets fee_description
     *
     * @return string
     */
    public function getFeeDescription()
    {
        return $this->container['fee_description'];
    }

    /**
     * Sets fee_description
     *
     * @param string $fee_description 计费方式描述
     *
     * @return $this
     */
    public function setFeeDescription($fee_description)
    {
        $this->container['fee_description'] = $fee_description;

        return $this;
    }

    /**
     * Gets incoterms
     *
     * @return int
     */
    public function getIncoterms()
    {
        return $this->container['incoterms'];
    }

    /**
     * Sets incoterms
     *
     * @param int $incoterms DDP/DDU方式:0 - DDP and DDU;1 -DDP;2 - DDU
     *
     * @return $this
     */
    public function setIncoterms($incoterms)
    {
        $this->container['incoterms'] = $incoterms;

        return $this;
    }

    /**
     * Gets is_support_elec
     *
     * @return bool
     */
    public function getIsSupportElec()
    {
        return $this->container['is_support_elec'];
    }

    /**
     * Sets is_support_elec
     *
     * @param bool $is_support_elec 是否支持带电
     *
     * @return $this
     */
    public function setIsSupportElec($is_support_elec)
    {
        $this->container['is_support_elec'] = $is_support_elec;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return float
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param float $max_length 最大单边长（cm）
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets max_total_length
     *
     * @return float
     */
    public function getMaxTotalLength()
    {
        return $this->container['max_total_length'];
    }

    /**
     * Sets max_total_length
     *
     * @param float $max_total_length 三边之和上限（cm）
     *
     * @return $this
     */
    public function setMaxTotalLength($max_total_length)
    {
        $this->container['max_total_length'] = $max_total_length;

        return $this;
    }

    /**
     * Gets max_weight
     *
     * @return float
     */
    public function getMaxWeight()
    {
        return $this->container['max_weight'];
    }

    /**
     * Sets max_weight
     *
     * @param float $max_weight 最大承载重量（kg）
     *
     * @return $this
     */
    public function setMaxWeight($max_weight)
    {
        $this->container['max_weight'] = $max_weight;

        return $this;
    }

    /**
     * Gets name_en
     *
     * @return string
     */
    public function getNameEn()
    {
        return $this->container['name_en'];
    }

    /**
     * Sets name_en
     *
     * @param string $name_en 物流服务名称（英文）
     *
     * @return $this
     */
    public function setNameEn($name_en)
    {
        $this->container['name_en'] = $name_en;

        return $this;
    }

    /**
     * Gets name_zh
     *
     * @return string
     */
    public function getNameZh()
    {
        return $this->container['name_zh'];
    }

    /**
     * Sets name_zh
     *
     * @param string $name_zh 物流服务名称（中文）
     *
     * @return $this
     */
    public function setNameZh($name_zh)
    {
        $this->container['name_zh'] = $name_zh;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string $picture 图片BASE64编码
     *
     * @return $this
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets prescription
     *
     * @return string
     */
    public function getPrescription()
    {
        return $this->container['prescription'];
    }

    /**
     * Sets prescription
     *
     * @param string $prescription 时效
     *
     * @return $this
     */
    public function setPrescription($prescription)
    {
        $this->container['prescription'] = $prescription;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string $service_id 物流服务ID
     *
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


